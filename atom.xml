<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eson Wong&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/bb64ee8880e0f75605904ab137b75e19</icon>
  <subtitle>编程记录，心得分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.esonwong.com/"/>
  <updated>2020-02-13T03:40:10.711Z</updated>
  <id>https://blog.esonwong.com/</id>
  
  <author>
    <name>Eson Wong</name>
    <email>itiwll@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Github Actions 部署前端项目到</title>
    <link href="https://blog.esonwong.com/%E4%BD%BF%E7%94%A8-Github-Actions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <id>https://blog.esonwong.com/%E4%BD%BF%E7%94%A8-Github-Actions-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-02-08T09:37:28.000Z</published>
    <updated>2020-02-13T03:40:10.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github-Actions-简介"><a href="#Github-Actions-简介" class="headerlink" title="Github Actions 简介"></a>Github Actions 简介</h2><p>GitHub Actions 是 Github 推出的一项服务。提供了虚拟服务器环境和 <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Actions 市场</a>，用于 github 上的项目进行持续集成。这对于 Github 上公开的仓库是免费的，私有仓库有服务器运行时间和存储空间的限制，具体请看 <a href="https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions" target="_blank" rel="noopener">about billing for github actions</a>。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>下面介绍怎么如使用 GitHub Actions 部署一个前端项目到 linux 服务器上。</p><a id="more"></a><h3 id="建立-workflow-配置文件"><a href="#建立-workflow-配置文件" class="headerlink" title="建立 workflow 配置文件"></a>建立 <code>workflow</code> 配置文件</h3><p>在仓库的根目录中创建文件夹 <code>.github/workflows</code>。在此文件夹中创建一个 <code>.yml</code> 后缀的文件。 </p><p>文件内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br></pre></td></tr></table></figure><h3 id="指定触发事件"><a href="#指定触发事件" class="headerlink" title="指定触发事件"></a>指定触发事件</h3><p>我们以推送到 master 分支为例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>更多触发方式参考 <a href="https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#triggering-a-workflow-with-events" target="_blank" rel="noopener">Triggering a workflow with events</a> 和 <a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noopener">Workflow syntax for GitHub Actions</a>。</p><h3 id="配置-jobs-和-build"><a href="#配置-jobs-和-build" class="headerlink" title="配置 jobs 和 build"></a>配置 jobs 和 build</h3><p>事件可以触发的多个 job，这里我们添加一个 build job, 指定运行环境。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br></pre></td></tr></table></figure><h3 id="配置-steps"><a href="#配置-steps" class="headerlink" title="配置 steps"></a>配置 steps</h3><p>在 build 下配置 steps。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br></pre></td></tr></table></figure><h4 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h4><p>使用 <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Actions 市场</a> 里的 <a href="https://github.com/actions/checkout" target="_blank" rel="noopener">actions/checkout</a> 获取仓库代码，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure><h4 id="安装模块和构建"><a href="#安装模块和构建" class="headerlink" title="安装模块和构建"></a>安装模块和构建</h4><p>使用 npm 安装模块和运行 build script。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>我们要使用 <code>rsync</code> 命令来同步构建好的文件目录到到发布目标服务器。</p><p>首先要准备可以在目标服务器上发布的私钥和 known-hosts，添加到仓库设置的 Secrets 中，命名为 <code>SSH_PRIVATE_KEY</code> 和 <code>KNOWN_HOSTS_TEST</code> 这样可以避免被暴露而在配置中使用。用 <a href="https://github.com/shimataro/ssh-key-action" target="_blank" rel="noopener">shimataro/ssh-key-action</a> 安装私钥到 Github Action 的虚拟服务器。</p><p><img src="../asset/add-secret.png" alt="添加服务器发布私钥"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">SSH</span> <span class="string">key</span> <span class="string">for</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">shimataro/ssh-key-action@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">id_rsa-deploy</span></span><br><span class="line">    <span class="attr">private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">known-hosts:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KNOWN_HOSTS_TEST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">Host</span> <span class="string">deploy</span></span><br><span class="line">        <span class="string">HostName</span> <span class="string">xxx.xxx.xxx</span></span><br><span class="line">        <span class="string">User</span> <span class="string">user-of-deploy</span></span><br><span class="line">        <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa-deploy</span></span><br></pre></td></tr></table></figure><p>使用 <code>rsync</code> 命令同步发布文件夹。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">rsync</span> <span class="string">-rv</span> <span class="string">$GITHUB_WORKSPACE/dist/</span> <span class="string">user@xxx.xxx.xxx:/www/demo</span></span><br></pre></td></tr></table></figure><h3 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h3><p>接下来推送代码到 master 分支即可执行这个 workflow ，将项目部署到服务器。可以在仓库的 Actions 菜单查看运行日志。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>链接：<a href="https://github.com/itiwll/github-actions-deploy-front-end-example" target="_blank" rel="noopener">Github Actions 发布前端项目演示</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://help.github.com/cn/actions/automating-your-workflow-with-github-actions" target="_blank" rel="noopener">GitHub Actions Documentation</a></li><li><a href="https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#triggering-a-workflow-with-events" target="_blank" rel="noopener">Triggering a workflow with events</a></li><li><a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">actions 市场</a></li><li><a href="https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions" target="_blank" rel="noopener">about billing for github actions</a></li><li><a href="https://github.com/itiwll/github-actions-deploy-front-end-example" target="_blank" rel="noopener">Github Actions 发布前端项目演示</a></li><li><a href="https://github.com/actions/checkout" target="_blank" rel="noopener">actions/checkout</a></li><li><a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noopener">Workflow syntax for GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github-Actions-简介&quot;&gt;&lt;a href=&quot;#Github-Actions-简介&quot; class=&quot;headerlink&quot; title=&quot;Github Actions 简介&quot;&gt;&lt;/a&gt;Github Actions 简介&lt;/h2&gt;&lt;p&gt;GitHub Actions 是 Github 推出的一项服务。提供了虚拟服务器环境和 &lt;a href=&quot;https://github.com/marketplace?type=actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Actions 市场&lt;/a&gt;，用于 github 上的项目进行持续集成。这对于 Github 上公开的仓库是免费的，私有仓库有服务器运行时间和存储空间的限制，具体请看 &lt;a href=&quot;https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;about billing for github actions&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;下面介绍怎么如使用 GitHub Actions 部署一个前端项目到 linux 服务器上。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github actions" scheme="https://blog.esonwong.com/tags/github-actions/"/>
    
      <category term="自动部署" scheme="https://blog.esonwong.com/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="前端部署" scheme="https://blog.esonwong.com/tags/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    
      <category term="自动化" scheme="https://blog.esonwong.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="教程" scheme="https://blog.esonwong.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="前端" scheme="https://blog.esonwong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ecmascript 提案：空值合并运算符 &quot;??&quot; </title>
    <link href="https://blog.esonwong.com/Ecmascript-%E6%8F%90%E6%A1%88-%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://blog.esonwong.com/Ecmascript-%E6%8F%90%E6%A1%88-%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-02-05T20:37:15.000Z</published>
    <updated>2020-02-13T03:40:10.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果控制合并运算符 <code>??</code> 左边的值为 <code>null</code> 或 <code>undefined</code> ，表达式会返回控制合并运算符右边的值，否则返回左边的值。</p><p>已经进入 stage 4(Finished) 阶段，等待加入标准。</p><a id="more"></a><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">"eson"</span>,</span><br><span class="line">    age: <span class="number">0</span>,</span><br><span class="line">    address: <span class="literal">null</span>,</span><br><span class="line">    gender: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> userName = user.name ?? <span class="string">"unknown"</span>; <span class="comment">// "eson"</span></span><br><span class="line"><span class="keyword">const</span> userAge = user.age ?? <span class="number">18</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> userAddress = user.address ?? <span class="string">"unknown"</span>; <span class="comment">// "unknown"</span></span><br><span class="line"><span class="keyword">const</span> userGender = user.gender ?? <span class="string">"male"</span>; <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h2 id="作用和使用场景"><a href="#作用和使用场景" class="headerlink" title="作用和使用场景"></a>作用和使用场景</h2><p><code>??</code> 主要可以用来获取对象属性值时替代 <code>||</code> 来设定默认值。使用 <code>||</code> 时，如果 <code>||</code> 左边的值为 <code>0</code> 或者空字符串，表达仍然降返回右边的值.</p><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userAge = user.age || <span class="number">18</span>; <span class="comment">// 18</span></span><br><span class="line"><span class="keyword">const</span> userAddress = user.address || <span class="string">"unknown"</span>; <span class="comment">// "unknown"</span></span><br><span class="line"><span class="keyword">const</span> userGender = user.gender || <span class="string">"male"</span>; <span class="comment">// "male"</span></span><br></pre></td></tr></table></figure><h2 id="使用-bable-插件支持空值合并运算符"><a href="#使用-bable-插件支持空值合并运算符" class="headerlink" title="使用 bable 插件支持空值合并运算符"></a>使用 bable 插件支持空值合并运算符</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-nullish-coalescing-operator</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add @babel/plugin-proposal-nullish-coalescing-operator -D</span><br></pre></td></tr></table></figure><h3 id="babel-配置"><a href="#babel-配置" class="headerlink" title="babel 配置"></a>babel 配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-nullish-coalescing-operator"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noopener">tc3/proposal-nullish-coalescing</a></li><li><a href="https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator" target="_blank" rel="noopener">@babel/plugin-proposal-nullish-coalescing-operator</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;如果控制合并运算符 &lt;code&gt;??&lt;/code&gt; 左边的值为 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; ，表达式会返回控制合并运算符右边的值，否则返回左边的值。&lt;/p&gt;
&lt;p&gt;已经进入 stage 4(Finished) 阶段，等待加入标准。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="空值合并运算符" scheme="https://blog.esonwong.com/tags/%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="nullish coalescing" scheme="https://blog.esonwong.com/tags/nullish-coalescing/"/>
    
      <category term="??" scheme="https://blog.esonwong.com/tags//"/>
    
      <category term="babel" scheme="https://blog.esonwong.com/tags/babel/"/>
    
      <category term="ECMAScript" scheme="https://blog.esonwong.com/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>Ecmascript 提案：可选链 &quot;?.&quot; </title>
    <link href="https://blog.esonwong.com/Ecmascript-%E6%8F%90%E6%A1%88%E5%8F%AF%E9%80%89%E9%93%BE/"/>
    <id>https://blog.esonwong.com/Ecmascript-%E6%8F%90%E6%A1%88%E5%8F%AF%E9%80%89%E9%93%BE/</id>
    <published>2020-01-31T20:37:15.000Z</published>
    <updated>2020-02-13T03:40:10.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可选链提案"><a href="#可选链提案" class="headerlink" title="可选链提案"></a>可选链提案</h2><p>可选链 Optional Chaining 是一项方便读取对象属性值的 ECMAScript 语法提案。它将检测将要读取属性所属的对象是否为 <code>null</code> 或者 <code>undefined</code>，如果是将会返回 <code>undefinde</code>, 另外也可调用方法时用作于检测方法是否存在，如果存在则执行。已经进入 stage 4(Finished) 阶段，等待加入标准。</p><a id="more"></a><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">"eson"</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> name = user?.name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> item0 = list?.[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">func.?();</span><br></pre></td></tr></table></figure><h2 id="作用和使用场景"><a href="#作用和使用场景" class="headerlink" title="作用和使用场景"></a>作用和使用场景</h2><p>许多 API 或者后端接口返回的结果通常是一个 <code>object</code> 或者 <code>array</code>, 如果没有可用值则会返回 <code>null</code> 或 <code>undefined</code>， 通常只有结果不为 <code>null</code> 或 <code>undefined</code> 的时候我们才会去读取它的属性。<code>?.</code> 可以省去烦人的对象检测。</p><h2 id="使用-bable-插件支持可选链语法"><a href="#使用-bable-插件支持可选链语法" class="headerlink" title="使用 bable 插件支持可选链语法"></a>使用 bable 插件支持可选链语法</h2><p>现在通过 babel 的 proposal-optional-chaining 插件可以提前享用可选链语法。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-optional-chaining</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add @babel/plugin-proposal-optional-chaining -D</span><br></pre></td></tr></table></figure><h3 id="babel-配置"><a href="#babel-配置" class="headerlink" title="babel 配置"></a>babel 配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-proposal-optional-chaining"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noopener">tc39 / proposal-optional-chaining</a></p></li><li><p><a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining" target="_blank" rel="noopener">@babel/plugin-proposal-optional-chaining</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;可选链提案&quot;&gt;&lt;a href=&quot;#可选链提案&quot; class=&quot;headerlink&quot; title=&quot;可选链提案&quot;&gt;&lt;/a&gt;可选链提案&lt;/h2&gt;&lt;p&gt;可选链 Optional Chaining 是一项方便读取对象属性值的 ECMAScript 语法提案。它将检测将要读取属性所属的对象是否为 &lt;code&gt;null&lt;/code&gt; 或者 &lt;code&gt;undefined&lt;/code&gt;，如果是将会返回 &lt;code&gt;undefinde&lt;/code&gt;, 另外也可调用方法时用作于检测方法是否存在，如果存在则执行。已经进入 stage 4(Finished) 阶段，等待加入标准。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="babel" scheme="https://blog.esonwong.com/tags/babel/"/>
    
      <category term="ECMAScript" scheme="https://blog.esonwong.com/tags/ECMAScript/"/>
    
      <category term="可选链" scheme="https://blog.esonwong.com/tags/%E5%8F%AF%E9%80%89%E9%93%BE/"/>
    
      <category term="optional chaining" scheme="https://blog.esonwong.com/tags/optional-chaining/"/>
    
      <category term="?." scheme="https://blog.esonwong.com/tags//"/>
    
  </entry>
  
  <entry>
    <title>怎么用 webpack 实现 js 模块按需懒加载？</title>
    <link href="https://blog.esonwong.com/%E6%80%8E%E4%B9%88%E7%94%A8-webpack-%E5%AE%9E%E7%8E%B0-js-%E6%A8%A1%E5%9D%97%E6%8C%89%E9%9C%80%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://blog.esonwong.com/%E6%80%8E%E4%B9%88%E7%94%A8-webpack-%E5%AE%9E%E7%8E%B0-js-%E6%A8%A1%E5%9D%97%E6%8C%89%E9%9C%80%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-01-28T11:28:49.000Z</published>
    <updated>2020-02-13T03:40:10.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态导入，ECMAScript-import-提案"><a href="#动态导入，ECMAScript-import-提案" class="headerlink" title="动态导入，ECMAScript import() 提案"></a>动态导入，ECMAScript <code>import()</code> 提案</h2><p>ECMAScript 有一项允许使用 <code>import()</code> 方法传入 url 返回 <code>Promise</code> 动态导入 ES 模块的提案。已经进入 stage 4(Finished) 阶段，等待加入标准。</p><a id="more"></a><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.esm.browser.js"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">rep</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Vue'</span>,rep.default)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Webpack 提供了 <code>import()</code> 语法，但是 Webpack 并不支持网络模块的导入。 Webpack 可以以本地路径或项目中安装的模块名动态导入模块。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"./a.js"</span>) <span class="comment">// 本地路径</span></span><br><span class="line">  .then(<span class="function"><span class="params">rep</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Vue'</span>,rep.default)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">"vue"</span>) <span class="comment">// 安装的模块名</span></span><br><span class="line">  .then(<span class="function"><span class="params">rep</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>,rep.default)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><em>注： 使用 Webpack 的 <code>import()</code> 传递动态的本地 path 需要一些技巧</em></p><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h2><p>Vue Router 配置的 component 属性支持传递一个返回 <code>Promise</code> 的方法，在匹配到路由准备渲染组件前会掉用此方法加载组件。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件加载状态"><a href="#组件加载状态" class="headerlink" title="组件加载状态"></a>组件加载状态</h2><p>Vue 函数式组件的 <code>createElemnt</code> （即 <code>h</code>）方法的第一个参数支持传递一个指定异步渲染的组件、加载时渲染的组件和加载失败渲染的组件的对象。我们可以据此创建一个懒加载容器组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">lazyLoadView</span>(<span class="params">AsyncView</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AsyncHandler = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class="line">    component: AsyncView,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步组件加载时使用的组件</span></span><br><span class="line">    loading: Loading,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载失败时使用的组件</span></span><br><span class="line">    <span class="comment">// error: Error,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class="line">    delay: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class="line">    <span class="comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class="line">    timeout: <span class="number">10000</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    functional: <span class="literal">true</span>,</span><br><span class="line">    render(h, &#123; data, children &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> h(AsyncHandler, data, children);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改路由配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/foo"</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">        lazyLoadView(</span><br><span class="line">         <span class="keyword">import</span>(<span class="string">"./Foo.vue"</span>)</span><br><span class="line">          <span class="comment">// 模拟网络延迟</span></span><br><span class="line">          <span class="comment">// new Promise(resolve =&gt; &#123;</span></span><br><span class="line">          <span class="comment">//   window.setTimeout(rep =&gt; &#123;</span></span><br><span class="line">          <span class="comment">//     resolve(import("./Foo.vue"));</span></span><br><span class="line">          <span class="comment">//   &#125;, 5000);</span></span><br><span class="line">          <span class="comment">// &#125;)</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><iframe     src="https://codesandbox.io/embed/vue-router-import-plws9?fontsize=14&hidenavigation=1&theme=dark"     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"     title="vue-router-import"     allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"     sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"   ></iframe><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">tc39/proposal-dynamic-import</a></li><li><a href="https://tc39.es/process-document/" target="_blank" rel="noopener">The TC39 Process</a></li><li><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">Vue Router - 路由懒加载</a></li><li><a href="https://juejin.im/post/5b90d0fcf265da0aa81bd728" target="_blank" rel="noopener">Vue异步组件处理路由组件加载状态</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态导入，ECMAScript-import-提案&quot;&gt;&lt;a href=&quot;#动态导入，ECMAScript-import-提案&quot; class=&quot;headerlink&quot; title=&quot;动态导入，ECMAScript import() 提案&quot;&gt;&lt;/a&gt;动态导入，ECMAScript &lt;code&gt;import()&lt;/code&gt; 提案&lt;/h2&gt;&lt;p&gt;ECMAScript 有一项允许使用 &lt;code&gt;import()&lt;/code&gt; 方法传入 url 返回 &lt;code&gt;Promise&lt;/code&gt; 动态导入 ES 模块的提案。已经进入 stage 4(Finished) 阶段，等待加入标准。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ECMAScript" scheme="https://blog.esonwong.com/tags/ECMAScript/"/>
    
      <category term="懒加载" scheme="https://blog.esonwong.com/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="import" scheme="https://blog.esonwong.com/tags/import/"/>
    
      <category term="vue" scheme="https://blog.esonwong.com/tags/vue/"/>
    
      <category term="webpack" scheme="https://blog.esonwong.com/tags/webpack/"/>
    
  </entry>
  
</feed>
